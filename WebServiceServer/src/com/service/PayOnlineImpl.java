package com.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.RandomAccessFile;

//Generated by MyEclipse

/**
 * Author: Zhang Mingshuai
 * CreateTime:2017-4-18下午06:12:33
 * Location: HIT
 */
public class PayOnlineImpl implements IPayOnline {

	public String verify(String id, String password) { // 验证用户密码
		String sb = null;
		String tempstr = null;
		String[] a = null; // 字符串数组用于保存从文件中读出的内容
		try {
			String path = "D:/XFire.txt";
			File file = new File(path);
			if (!file.exists()) { // 当文件不存在时，创建一个
				file.createNewFile();
				PrintStream ps = new PrintStream(new FileOutputStream(file));
				String temp = "-用户- -密码- -账户余额-";
				for (int i = 0; i < 64; i++) {
					temp += " ";
				}
				byte[] k = new byte[64];  //通过字节流输入来为后来的RandomAccessFile类对文件读写做铺垫
				k = temp.getBytes("utf-8");
				ps.write(k, 0, 62);
				ps.write("\r\n".getBytes());
			}
			FileInputStream fis = new FileInputStream(file); // 文件输入流
			BufferedReader br = new BufferedReader(new InputStreamReader(fis,
					"utf-8"));// 设置编码规则，放置中文乱码
			while ((tempstr = br.readLine()) != null) {
				sb = new String(tempstr);
				a = sb.toString().split("\\s"); // 将字符串以空格进行分割保存至a中
				//System.out.println(a[0] + " " + a[1] + " " + a[2]); //调试过程中用于debug了...
				if (a[0].equals(id) && (a[1].equals(password))) {
					return "Sign in Successfully!"; // 匹配成功，即找到了该用户且密码输入正确
				} else if (a[0].equals(id) && (!a[01].equals(password))) {
					return "Password Error!"; // 找到该用户，但是密码不正确
				}

			}

			return "User not exist!";
		} catch (IOException ex) {
			System.out.println(ex.getStackTrace());
			return "System Error!"; // 意外情况时返回-1
		}
	}

	public String signup(String id, String password) { // 注册

		try {
			String path = "D:/XFire.txt";
			File file = new File(path);
			if (!file.exists()) { // 当文件不存在时，创建一个
				file.createNewFile();
				PrintStream ps = new PrintStream(new FileOutputStream(file));
				String temp = "-用户- -密码- -账户余额-";
				for (int i = 0; i < 64; i++) {
					temp += " ";
				}
				byte[] k = new byte[64];
				k = temp.getBytes("utf-8");//通过字节流输入来为后来的RandomAccessFile类对文件读写做铺垫
				ps.write(k, 0, 62);
				ps.write("\r\n".getBytes());
			}
			FileOutputStream out = new FileOutputStream(file, true); // 采用追加方式用true
			StringBuffer sb = new StringBuffer();
			sb.append(id + "\t" + password + "\t" + "0"); // windows中换行符为\r\n,linux中换行符为\r,Mac换行符为\n
			String sbString = sb.toString();
			byte[] w = new byte[64];//通过字节流输入来为后来的RandomAccessFile类对文件读写做铺垫
			for (int i = 0; i < 64; i++) {
				sbString += " ";
			}
			w = sbString.getBytes("utf-8");
			out.write(w, 0, 62);// 转换对应的字符集utf-8,防止中文乱码。
			out.write("\r\n".getBytes());
			out.close();
			return "Sign up Successfully!";
		} catch (IOException ex) {
			System.out.println(ex.getStackTrace());
			return "Error when sign up!";
		}
	}

	public String getAccount(String id) {	//获取账户余额
		String sb = null;
		String tempstr = null;
		String[] a = null; // 字符串数组用于保存从文件中读出的内容
		try {
			String path = "D:/XFire.txt";
			File file = new File(path);
			if (!file.exists()) { // 当文件不存在时，创建一个
				return "don't have a user!";
			}
			FileInputStream fis = new FileInputStream(file); // 文件输入流
			BufferedReader br = new BufferedReader(new InputStreamReader(fis,
					"utf-8"));// 设置统一的编码规则，放置中文乱码
			while ((tempstr = br.readLine()) != null) {
				sb = new String(tempstr);
				a = sb.toString().split("\\s"); // 将缓冲区的字符串以空格进行分割保存至a中
				if (a[0].equals(id)) {
					return "Account: " + a[2] + " 元"; // 匹配成功，返回用户余额
				}

			}
			return "User not exist!";
		} catch (IOException ex) {
			System.out.println(ex.getStackTrace());
			return "System Error!";
		}
	}

	public String buy(String id, int money) {	//实现账户支付功能
		String sb = null;
		String tempstr = null;
		String write = null;
		String[] a = null;
		String mon = null;
		try {
			String path = "D:/XFire.txt";
			File file = new File(path);
			if (!file.exists()) {
				return "don't have a user!";
			}
			RandomAccessFile raFile = new RandomAccessFile(file, "rw");
			byte[] rd = new byte[64];
			rd = null;
			Long beforelong = (long) 0;
			System.out.println("pointer:" + raFile.getFilePointer());
			while ((tempstr = raFile.readLine()) != null) {
				System.out.println("pointer:" + raFile.getFilePointer());
				sb = new String(tempstr.getBytes("ISO-8859-1"), "utf-8");
				a = sb.split("\\s");
				System.out.println("a0:" + a[0] + "a1:" + a[1] + "a2:" + a[2]);
				if (a[0].equals(id)) {
					// Long tLong = raFile.getFilePointer();
					raFile.seek(beforelong);
					mon = String.valueOf(Integer.valueOf(a[2])-money);
					write = a[0] + "\t" + a[1] + "\t" + mon;	//在之前找到的位置进行重写
					for (int i = 0; i < 64; i++) {
						write += " ";
					}
					rd = write.getBytes("utf-8");
					// System.out.println("pointer:"+tLong);
					raFile.write(rd, 0, 62);//通过字节流输入来为后来的RandomAccessFile类对文件读写做铺垫
					raFile.write("\r\n".getBytes());
					break;
				}
				beforelong = raFile.getFilePointer();
			}
			return "Your money amount after shopping is: " + mon;
		} catch (IOException ex) {
			System.out.println(ex.getStackTrace());
			return "System Error!";
		}
	}

	public String store(String id, int money) {		//实现账户转入功能
		String sb = null;
		String tempstr = null;
		String write = null;
		String[] a = null;
		String mon = null;
		try {
			String path = "D:/XFire.txt";
			File file = new File(path);
			if (!file.exists()) {
				return "don't have a user!";
			}
			RandomAccessFile raFile = new RandomAccessFile(file, "rw");
			byte[] rd = new byte[64];
			rd = null;
			Long beforelong = (long) 0;
			System.out.println("pointer:" + raFile.getFilePointer());
			while ((tempstr = raFile.readLine()) != null) {
				System.out.println("pointer:" + raFile.getFilePointer());
				sb = new String(tempstr.getBytes("ISO-8859-1"), "utf-8");
				a = sb.split("\\s");
				System.out.println("a0:" + a[0] + "a1:" + a[1] + "a2:" + a[2]);
				if (a[0].equals(id)) {
					// Long tLong = raFile.getFilePointer();
					raFile.seek(beforelong);
					mon = String.valueOf(money + Integer.valueOf(a[2]));
					write = a[0] + "\t" + a[1] + "\t" + mon;
					for (int i = 0; i < 64; i++) {//通过字节流输入来为后来的RandomAccessFile类对文件读写做铺垫
						write += " ";
					}
					rd = write.getBytes("utf-8");
					// System.out.println("pointer:"+tLong);
					raFile.write(rd, 0, 62);
					raFile.write("\r\n".getBytes());
					break;
				}
				beforelong = raFile.getFilePointer();
			}
			return "Your money amount after storing is: " + mon;
		} catch (IOException ex) {
			System.out.println(ex.getStackTrace());
			return "System Error!";
		}
	}
}